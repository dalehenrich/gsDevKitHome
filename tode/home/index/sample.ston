TDScriptLeafNode{#name:'sample',#contents:'[ :topez :objIn :tokens :command | 
  | opts args |
  \"for help: ./sample -h\"
  command
    getOptsMixedLongShort:
      {#(\'help\' $h #\'none\').
      #(\'clean\' nil #\'none\').
      #(\'create\' nil #\'optional\').
      #(\'index\' nil #\'optional\').
      #(\'query\' nil #\'optional\')}
    optionsAndArguments: [ :options :operands | 
      opts := options.
      args := operands ].
  opts
    at: \'help\'
    ifAbsent: [ 
      | analysis theColl query selectResult queryResult queryTime selectTime queryCpuTime selectCpuTime names |
      analysis := Dictionary new.
      opts
        at: \'clean\'
        ifPresent: [ :ignored | 
          \"clean up indexes here\"
          UserGlobals removeKey: #\'coll\' ifAbsent: [  ].
          IndexManager removeAllIndexes ].
      names := {\'Dale\'.
      \'Nic\'.
      \'Brian\'.
      \'Janet\'.
      \'Heather\'}.
      opts
        at: \'create\'
        ifPresent: [ :sampleCount | 
          | nsc samples base minCount |
          minCount := 15.
          samples := sampleCount
            ifNil: [ minCount ]
            ifNotNil: [ sampleCount asNumber max: minCount ].
          nsc := IdentityBag new.
          base := DateAndTime now.
          UserGlobals
            at: #\'coll\' put: nsc;
            at: #\'baseDate\' put: base;
            yourself.
          1 to: samples do: [ :index | 
            | sample children |
            children := Set new.
            1 to: 5 atRandom do: [ :index | children add: (names at: index) ].
            sample := index -> (children -> (base + (index - 1) days)).
            nsc add: sample.
            index \\\\ 1000 = 0
              ifTrue: [ System commitTransaction ] ] ].
      theColl := UserGlobals at: #\'coll\' ifAbsent: [ Set new ].
      opts
        at: \'index\'
        ifPresent: [ :ignored | 
          IndexManager autoCommit: true.
          GsIndexSpec new
            identityIndex: \'key\';
            equalityIndex: \'value.value\' lastElementClass: DateAndTime;
            equalityIndex: \'value.key.*\' lastElementClass: String;
            createIndexesOn: theColl;
            yourself ].
      opts
        at: \'query\'
        ifPresent: [ :window | 
          | startDate endDate mid d1 d2 windowSize |
          windowSize := window ifNil: [ 5 ] ifNotNil: [ window asNumber ].
          startDate := UserGlobals at: #\'baseDate\' ifAbsent: [ DateAndTime now ].
          endDate := startDate + (theColl size - 1) days.
          mid := (endDate - startDate) / 2.
          d1 := startDate + mid - windowSize days.
          d2 := startDate + mid + windowSize days.
          query := (\'(d1 < each.value.value ) & ( each.value.value < d2) & (each.value.key.* = \'\'Heather\'\')\'
            asQueryOn: theColl)
            bind: \'d1\' to: d1;
            bind: \'d2\' to: d2;
            queryOptions: GsQueryOptions default - GsQueryOptions autoOptimize;
            optimize;
            yourself.
          queryTime := Time
            millisecondsToRun: [ queryCpuTime := System millisecondsToRun: [ queryResult := query queryResult ] ].
          selectTime := Time
            millisecondsToRun: [ 
              selectCpuTime := System
                millisecondsToRun: [ 
                  selectResult := theColl
                    select: [ :each | 
                      d1 < each value value & (each value value < d2)
                        and: [ each value key includes: \'Heather\' ] ] ] ].
          analysis
            at: \'startDate\' put: startDate;
            at: \'d1\' put: d1;
            at: \'mid\' put: startDate + mid;
            at: \'d2\' put: d2;
            at: \'endDate\' put: endDate;
            yourself ].
      analysis
        at: \'nsc\' put: theColl;
        at: \'query\' put: query;
        at: \'query result\' put: queryResult;
        at: \'select result\' put: selectResult;
        at: \'select block result\' put: selectResult;
        at: \'CORRECT\' put: queryResult = selectResult;
        at: \'time\'
          put:
            {queryTime.
              queryCpuTime.
              selectTime.
              selectCpuTime};
        yourself.
      analysis ]
    ifPresent: [ :ignored | 
      TDManPage
        viewManPage:
          \'NAME
  sample - sample sript utility template
SYNOPSIS
  sample [-h|--help]
  sample [--clean] [--create[=<num_samples>]] [--index] [--query[=<window>]]
DESCRIPTION
  The query window is 1/2 the number of elements returned by search.

EXAMPLES
  ./sample --help

  ./sample --clean --create 
  ./sample --clean --create=1000 --index
  ./sample --clean --query=5
  ./sample --clean --create=1000 --query
  ./sample --clean --create=1000 --index --query=5
\'
        topez: topez ] ]',#creationTime:DateAndTime['2014-08-05T10:28:36.1586060523986-07:00'],#modificationTime:DateAndTime['2014-08-05T17:46:34.139671087265-07:00']}