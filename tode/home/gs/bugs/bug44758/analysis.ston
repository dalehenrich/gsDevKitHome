TDStringLeafNode{#name:'analysis',#contents:'dkh 11/3/2014 12:47
-------------------
          queryString := \'(startDate <= each.orderDate < endDate)\'.

                      selectResult := theColl
                        select: [ :each | startDate <= each.orderDate & (each.orderDate < endDate) ].

                      selectBlockResult := theColl
                        select: { :each | (startDate <= each.orderDate) & (each.orderDate < endDate) } .
------
  ./bug --clean --create=300 --index --query=600; edit
  ./bug --query=100000; edit
---
1@       -> \'base endDate\'->12/31/1993
2@       -> \'base startDate\'->01/01/1993
3@       -> \'CORRECT\'->true
4@       -> \'endDate\'->05/31/1994
5@       -> \'mid\'->182:00:00:00
6@       -> \'nsc\'->aRcIdentityBag( index = 40727 orderDate = 05/16/1993 discount = 0 quantity = 136, index = 3986 orderDate = 01/14/1993 discount = 4 qu...
7@       -> \'nsc size\'->109500
8@       -> \'query\'->(startDate <= each.orderDate < endDate)
9@       -> \'query result\'->anIdentityBag( index = 40727 orderDate = 05/16/1993 discount = 0 quantity = 136, index = 3986 orderDate = 01/14/1993 discoun...
10@      -> \'query result size\'->109500
11@      -> \'samples per day\'->300
12@      -> \'select block result\'->anIdentityBag( index = 40727 orderDate = 05/16/1993 discount = 0 quantity = 136, index = 3986 orderDate = 01/14/1993 ...
13@      -> \'select result\'->anIdentityBag( index = 40727 orderDate = 05/16/1993 discount = 0 quantity = 136, index = 3986 orderDate = 01/14/1993 discou...
14@      -> \'sorted\'->anArray( index = 1 orderDate = 01/01/1993 discount = 3 quantity = 1, index = 2 orderDate = 01/01/1993 discount = 5 quantity = 1, i...
15@      -> \'startDate\'->08/03/1992
16@      -> \'time\'->anArray( 16, 17, 65, 65, 21, 22)
17@      -> \'window size\'->333
------
Indexed Query profile summary:
--------------------
elapsed CPU time: 41 ms
tally % smpl% ms class and method name
----- ----- ----- ----- ---------------------
  16 69.57 69.57 28.5 BtreeBasicLeafNode >> _addValues:start:end:into:
   1 4.35 4.35 1.8 BtreeReadStream >> _nextLeaf
   1 4.35 4.35 1.8 System class >> _readClock
   1 4.35 4.35 1.8 AbstractDictionary >> _at:
   1 4.35 4.35 1.8 Character class >> withValue:
   1 4.35 4.35 1.8 Character >> _unicodeStatus:
   1 4.35 4.35 1.8 Object >> immediateInvariant
   1 4.35 4.35 1.8 PPActionParser class >> on:block:
   0 0.00 4.35 1.8 ProfMonitor >> startMonitoring
   0 0.00 4.35 1.8 TDProfileTool >> pfstart

selectBlock profile summary:
--------------------
elapsed CPU time: 329 ms
tally % smpl% ms class and method name
----- ----- ----- ----- ---------------------
  33 12.74 12.74 41.9 IdentityBag >> _at:
  32 12.36 40.54 133.4 Magnitude >> <=
  31 11.97 11.97 39.4 NscBuilder >> add:
  26 10.04 10.04 33.0 SmallInteger >> >
  25 9.65 19.69 64.8 Date >> >
  24 9.27 17.37 57.2 Date >> <
  22 8.49 8.49 27.9 Boolean >> not
  21 8.11 97.30 320.1 UnorderedCollection >> _select:
  21 8.11 8.11 26.7 SmallInteger >> <
  15 5.79 5.79 19.1 Boolean >> &
   1 0.39 0.77 2.5 System class >> _readClock
   1 0.39 0.39 1.3 SmallInteger >> \\\\
   1 0.39 0.39 1.3 Character class >> withValue:
------------------
./bug --query=600; edit
---
1@       -> \'base endDate\'->12/31/1993
2@       -> \'base startDate\'->01/01/1993
3@       -> \'CORRECT\'->true
4@       -> \'endDate\'->07/04/1993
5@       -> \'mid\'->182:00:00:00
6@       -> \'nsc\'->aRcIdentityBag( index = 40727 orderDate = 05/16/1993 discount = 0 quantity = 136, index = 3986 orderDate = 01/14/1993 discount = 4 qu...
7@       -> \'nsc size\'->109500
8@       -> \'query\'->(startDate <= each.orderDate < endDate)
9@       -> \'query result\'->anIdentityBag( index = 54156 orderDate = 06/30/1993 discount = 0 quantity = 181, index = 54155 orderDate = 06/30/1993 discou...
10@      -> \'query result size\'->1200
11@      -> \'samples per day\'->300
12@      -> \'select block result\'->anIdentityBag( index = 54156 orderDate = 06/30/1993 discount = 0 quantity = 181, index = 54155 orderDate = 06/30/1993...
13@      -> \'select result\'->anIdentityBag( index = 54156 orderDate = 06/30/1993 discount = 0 quantity = 181, index = 54155 orderDate = 06/30/1993 disco...
14@      -> \'sorted\'->anArray( index = 1 orderDate = 01/01/1993 discount = 3 quantity = 1, index = 2 orderDate = 01/01/1993 discount = 5 quantity = 1, i...
15@      -> \'startDate\'->06/30/1993
16@      -> \'time\'->anArray( 0, 1, 46, 46, 0, 1)
17@      -> \'window size\'->2
---
dkh 11/3/2014 13:10
-------------------
Push the StarSchema down a bit for a deeper index path and force the IndexDictionary into play ... also try starting the indexes created on nsc BEFORE adding all the elements to compare to a \"properly sized\" indexDictionary ...

dkh 11/3/2014 14:49
-------------------
Yeppers looks like traversal can be costly ...

  ./bug --clean --depth --create=300 --index --query=100000 --profile=query; edit

1@       -> \'base endDate\'->12/31/1993
2@       -> \'base startDate\'->01/01/1993
3@       -> \'CORRECT\'->true
4@       -> \'endDate\'->05/31/1994
5@       -> \'mid\'->182:00:00:00
6@       -> \'nsc\'->aRcIdentityBag( 7->7->index = 1989 orderDate = 01/07/1993 discount = 4 quantity = 7, 7->7->index = 1988 orderDate = 01/07/1993 discou...
7@       -> \'nsc size\'->109500
8@       -> \'query\'->(startDate <= each.value.value.orderDate < endDate)
9@       -> \'query result\'->anIdentityBag( 7->7->index = 1989 orderDate = 01/07/1993 discount = 4 quantity = 7, 7->7->index = 1988 orderDate = 01/07/199...
10@      -> \'query result size\'->109500
11@      -> \'samples per day\'->300
12@      -> \'select block result\'->anIdentityBag( 7->7->index = 1989 orderDate = 01/07/1993 discount = 4 quantity = 7, 7->7->index = 1988 orderDate = 01...
13@      -> \'select result\'->anIdentityBag( 7->7->index = 1989 orderDate = 01/07/1993 discount = 4 quantity = 7, 7->7->index = 1988 orderDate = 01/07/19...
14@      -> \'sorted\'->anArray( 1->1->index = 1 orderDate = 01/01/1993 discount = 0 quantity = 1, 1->1->index = 2 orderDate = 01/01/1993 discount = 5 qua...
15@      -> \'startDate\'->08/03/1992
16@      -> \'time\'->anArray( 112, 112, 92, 92, 111, 111)
17@      -> \'window size\'->333

formula:
--------------------
elapsed CPU time: 118 ms
tally     %  smpl%    ms class and method name
----- -----  ----- ----- ---------------------
 109  93.16  93.16 109.9 BtreeBasicLeafNode        >> _traverseValues:start:end:previous:into:
   1   0.85   0.85   1.0 System class              >> _addToRcReadSet:includingAllNodes:
   1   0.85   7.69   9.1 PPActionParser            >> parseOn:
   1   0.85   0.85   1.0 System class              >> _readClock
   1   0.85 101.71 120.0 AbstractDictionary        >> at:ifPresent:
   1   0.85   1.71   2.0 PPCharSetPredicate        >> initializeOn:
   1   0.85   0.85   1.0 Character class           >> withValue:
   1   0.85   0.85   1.0 Association class         >> newWithKey:value:
   1   0.85   0.85   1.0 Object                    >> shallowCopy
   0   0.00  93.16 109.9 RangeIndexReadStream      >> _uniqueValuesAddInto:comparing:key:and:key:
   0   0.00  93.16 109.9 RangeIndexReadStream      >> _uniqueValuesAddInto:spec:
   0   0.00  93.16 109.9 BtreeQuerySpec            >> traverseValuesFrom:start:end:previous:into:

selectBlock:
--------------------
elapsed CPU time: 296 ms
tally     %  smpl%    ms class and method name
----- -----  ----- ----- ---------------------
  45  15.62  23.96  70.9 Date                      >> <
  39  13.54  13.54  40.1 NscBuilder                >> add:
  38  13.19  35.07 103.8 Magnitude                 >> <=
  32  11.11  11.11  32.9 IdentityBag               >> _at:
  25   8.68   8.68  25.7 SmallInteger              >> <
  25   8.68   8.68  25.7 SmallInteger              >> >
  25   8.68   8.68  25.7 Boolean                   >> &
  21   7.29  15.97  47.3 Date                      >> >
  17   5.90   5.90  17.5 Boolean                   >> not
  15   5.21  97.92 289.8 UnorderedCollection       >> _select:
   1   0.35   0.35   1.0 System class              >> _readClock

dkh 11/3/2014 16:42
-------------------
here\'s the tail of the spot run:
---
Function Name: traverseBackwardsAndAdd(om*,omObjSType**,omObjSType**,omObjSType**,long,omObjSType**,omObjSType**)
Attr.      Name
User CPU
 sec.
3.783      IDXBtreeRangeComparisonQuerySpec::traverseValuesFrom(om*,omObjSType**,int,int,int,omObjSType**)
0.160     *traverseBackwardsAndAdd(om*,omObjSType**,omObjSType**,omObjSType**,long,omObjSType**,omObjSType**)
1.861      indexDictionaryAtTerm(om*,omObjSType**,omObjSType**,omObjSType**,int*,omObjSType**)
0.761      indexBucketBinarySearch(unsigned long,unsigned long,omObjSType**,int)
0.700      nscBuilderAdd(om*,omObjSType**,omObjSType**)
0.070      om::FetchOop(omObjSType*,long)
0.050      om::AddPathToRcReadSet(om*,omObjSType**,long)
0.050      om::FetchOopNoFault(omObjSType*,long)
0.040      BmSetBit(PageCacheSType*,RepTreeRootSType*,unsigned long)
0.040      indexBucketBitOperation(om*,omObjSType**,long,IdxBucketOpEType)
0.040      om::objIdOfObj(om*,omObjSType**)
0.010      indexBucketIsBucketValueBag(om*,omObjSType**,long)
0.         om::LoadObj(om*,omSpaceType*,unsigned long,int)
---
Function Name: indexDictionaryAtTerm(om*,omObjSType**,omObjSType**,omObjSType**,int*,omObjSType**)
Attr.      Name
User CPU
 sec.
1.861      traverseBackwardsAndAdd(om*,omObjSType**,omObjSType**,omObjSType**,long,omObjSType**,omObjSType**)
0.060     *indexDictionaryAtTerm(om*,omObjSType**,omObjSType**,omObjSType**,int*,omObjSType**)
1.061      indexBucketBinarySearch(unsigned long,unsigned long,omObjSType**,int)
0.460      om::FetchOop(omObjSType*,long)
0.170      om::AddPathToRcReadSet(om*,omObjSType**,long)
0.040      indexBucketBitOperation(om*,omObjSType**,long,IdxBucketOpEType)
0.020      BmSetBit(PageCacheSType*,RepTreeRootSType*,unsigned long)
0.020      om::objIdOfObj(om*,omObjSType**)
0.010      indexBucketIsBucketValueBag(om*,omObjSType**,long)
0.010      om::FetchOopNoFault(omObjSType*,long)
0.010      om::LoadObj(om*,omSpaceType*,unsigned long,int)
---
Function Name: indexBucketBinarySearch(unsigned long,unsigned long,omObjSType**,int)
Attr.      Name
User CPU
 sec.
1.061      indexDictionaryAtTerm(om*,omObjSType**,omObjSType**,omObjSType**,int*,omObjSType**)
0.761      traverseBackwardsAndAdd(om*,omObjSType**,omObjSType**,omObjSType**,long,omObjSType**,omObjSType**)
0.120     *indexBucketBinarySearch(unsigned long,unsigned long,omObjSType**,int)
1.701      om::FetchOopNoFault(omObjSType*,long)
---
Function Name: om::FetchOopNoFault(omObjSType*,long)
Attr.      Name
User CPU
 sec.
1.701      indexBucketBinarySearch(unsigned long,unsigned long,omObjSType**,int)
0.050      traverseBackwardsAndAdd(om*,omObjSType**,omObjSType**,omObjSType**,long,omObjSType**,omObjSType**)
0.030      IDXBtreeRangeComparisonQuerySpec::traverseValuesFrom(om*,omObjSType**,int,int,int,omObjSType**)
0.010      indexDictionaryAtTerm(om*,omObjSType**,omObjSType**,omObjSType**,int*,omObjSType**)
0.010      NscAddSortedOops(om*,omObjSType**,long,long,omObjSType**,int)
0.010      nscSortOops(om*,long,omObjSType**,long,omObjSType**)
1.811     *om::FetchOopNoFault(omObjSType*,long)
---
--------------------------
At the end of the day we\'re burning significant cpu in [1.701      indexBucketBinarySearch(unsigned long,unsigned long,omObjSType**,int)] which is spending all time in [1.811     *om::FetchOopNoFault(omObjSType*,long)] ... 

soooooo, I\'m suspicious that the RcIndexDictionary needs to be rebuilt...

dkh 11/3/2014 16:56
-------------------
Buuuuuuut ... taking a look at the index dict statistics:

1@       -> #\'AvgEntriesPerIndexBucket\'->1.0933599600599101E02
2@       -> #\'IndexDictionaryPages\'->anIdentitySet( 17159, 17184, 17185, 17186, 17219, 17220, 17221, 17222, 17223, 17224, 17225, 17226, 17227, 17228, 17...
3@       -> #\'IndexDictionaryPhysicalSize\'->5846928
4@       -> #\'IndexDictionaryRootSize\'->2003
5@       -> #\'IndexDictionarySpaceUtilization\'->anArray( anArray( 109, 110, 108, 110, 110, 109, 110, 106, 109, 109, 110, 109, 110, 108, 109, 110, 108, 1...
6@       -> #\'LargestIndexBucketSize\'->110

the largest bucket size is 110 ... which is not bad .... the target size is 145 so we\'re not off base ... we\'re just burning cpu with lot\'s o\'lookups ...

dkh 11/3/2014 17:16
-------------------
What\'s the parformance if we try to skinny the bucket size down to 50 or 25? Do we get better perfomance?


',#creationTime:DateAndTime['2014-10-31T16:39:33.2204151153564-07:00'],#modificationTime:DateAndTime['2014-11-03T17:17:50.963907957077-08:00']}