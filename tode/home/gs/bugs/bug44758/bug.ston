TDScriptLeafNode{#name:'bug',#contents:'[ :topez :objIn :tokens :command | 
  | opts args |
  \"for help: ./bug -h\"
  command
    getOptsMixedLongShort:
      {#(\'help\' $h #\'none\').
      #(\'clean\' nil #\'none\').
      #(\'create\' nil #\'optional\').
      #(\'depth\' nil #\'none\').
      #(\'index\' nil #\'optional\').
      #(\'profile\' nil #\'optional\').
      #(\'run\' nil #\'required\').
      #(\'query\' nil #\'optional\')}
    optionsAndArguments: [ :options :operands | 
      opts := options.
      args := operands ].
  opts
    at: \'help\'
    ifAbsent: [ 
      | analysis sortedColl theColl query selectResult queryResult queryTime selectTime queryCpuTime selectCpuTime selectBlockResult selectBlockTime selectBlockCpuTime reps |
      analysis := Dictionary new.
reps := 10.
      opts
        at: \'clean\'
        ifPresent: [ :ignored | 
          \"clean up indexes here\"
          UserGlobals removeKey: #\'coll\' ifAbsent: [  ].
          IndexManager removeAllIndexes.
          Smalltalk at: #\'StarSchema\' ifPresent: [ :cl | cl removeFromSystem ] ].
      opts
        at: \'create\'
        ifPresent: [ :sampleCount | 
          | cls nsc samples startDate minCount count |
          cls := Smalltalk
            at: #\'StarSchema\'
            ifAbsent: [ 
              cls := Object
                subclass: \'StarSchema\'
                instVarNames: #(\'index\' \'orderDate\' \'discount\' \'quantity\')
                inDictionary: UserGlobals.
              cls
                compile: \'index: anObject index := anObject\';
                compile: \'index ^index\';
                compile: \'orderDate: anObject orderDate := anObject\';
                compile: \'orderDate ^orderDate\';
                compile: \'discount: anObject discount := anObject\';
                compile: \'discount ^discount\';
                compile: \'quantity: anObject quantity := anObject\';
                compile: \'quantity ^quantity\';
                compile:
                    \'printOn: aStream aStream nextPutAll: \'\'index = \'\', index printString, \'\' orderDate = \'\', orderDate printString, \'\' discount = \'\', discount printString, \'\' quantity = \'\', quantity printString\';
                yourself ].
          minCount := 15.
          samples := sampleCount
            ifNil: [ minCount ]
            ifNotNil: [ sampleCount asNumber max: minCount ].
          nsc := RcIdentityBag new: 100.
          startDate := Date newDay: 1 year: 1993.
          UserGlobals
            at: #\'coll\' put: nsc;
            at: #\'baseStartDate\' put: startDate;
            at: #\'samples\' put: samples;
            yourself.
          count := 1.
          1 to: 365 do: [ :index | 
            | sample date |
            date := startDate + (index - 1) days.
            samples
              timesRepeat: [ 
                sample := cls new
                  index: count;
                  orderDate: date;
                  quantity: index;
                  discount: #(0 1 2 3 4 5) atRandom;
                  yourself.
                count := count + 1.
                opts
                  at: \'depth\'
                  ifPresent: [ :notUsed | nsc add: index -> (index -> sample) ]
                  ifAbsent: [ nsc add: sample ].
                index \\\\ 1000 = 0
                  ifTrue: [ System commitTransaction ] ].
            UserGlobals at: #\'lastStartDate\' put: date ] ].
      theColl := UserGlobals at: #\'coll\' ifAbsent: [ Set new ].
      opts
        at: \'index\'
        ifPresent: [ :ignored | 
          | depth |
          IndexManager autoCommit: true.
          depth := \'each.\'.
          opts
            at: \'depth\'
            ifPresent: [ :notUsed | depth := \'each.value.value.\' ].
          GsIndexSpec new
            equalityIndex: depth , \'orderDate\' lastElementClass: Date;
            equalityIndex: depth , \'discount\' lastElementClass: SmallInteger;
            equalityIndex: depth , \'quantity\' lastElementClass: SmallInteger;
            createIndexesOn: theColl;
            yourself ].
      opts
        at: \'query\'
        ifPresent: [ :window | 
          | startDate endDate baseStartDate baseEndDate mid d1 d2 windowSize profileTool queryString samplesPerDay profile run depth |
          profileTool := topez toolInstanceFor: \'pf\'.
          run := #\'all\'.
          opts
            at: \'profile\'
            ifPresent: [ :spec | 
              spec ifNotNil: [ run := spec asSymbol ].
              profileTool pfstart ]
            ifAbsent: [ opts at: \'run\' ifPresent: [ :spec | run := spec asSymbol ] ].
          samplesPerDay := UserGlobals at: #\'samples\' ifAbsent: [ 15 ].
          windowSize := (window ifNil: [ 5 ] ifNotNil: [ window asNumber ])
            // samplesPerDay.
          baseStartDate := UserGlobals
            at: #\'baseStartDate\'
            ifAbsent: [ Date now ].
          baseEndDate := UserGlobals at: #\'lastStartDate\' ifAbsent: [ Date now ].
          mid := (baseEndDate - baseStartDate) / 2.
          startDate := baseStartDate + mid - windowSize days.
          endDate := baseStartDate + mid + windowSize days.
          analysis
            at: \'window size\' put: windowSize;
            at: \'samples per day\' put: samplesPerDay;
            at: \'startDate\' put: startDate;
            at: \'endDate\' put: endDate;
            at: \'mid\' put: mid;
            at: \'base startDate\' put: baseStartDate;
            at: \'base endDate\' put: baseEndDate;
            yourself.
          opts
            at: \'depth\'
            ifPresent: [ :notUsed | depth := \'each.value.value.\' ].
          queryString := \'(\' , depth , \'quantity < 25)\'.
          queryString := \'(1 <= \' , depth , \'discount <= 3)\'.
          queryString := \'(\' , depth , \'quantity < 25) & (startDate <= \' , depth
            , \'orderDate < endDate) & (1 <= \' , depth , \'discount <= 3)\'.
          queryString := \'(startDate <= \' , depth , \'orderDate < endDate)\'.
          query := (queryString asQueryOn: theColl)
            bind: \'startDate\' to: startDate;
            bind: \'endDate\' to: endDate;
            queryOptions: GsQueryOptions default - GsQueryOptions autoOptimize;
            optimize;
            yourself.
          (run == #\'all\' or: [ run == #\'query\' ])
            ifTrue: [ 
              queryTime := Time
                millisecondsToRun: [ reps timesRepeat: [queryCpuTime := System millisecondsToRun: [ queryResult := query queryResult ]] ] ].
          (run == #\'all\' or: [ run == #\'selectBlock\' ])
            ifTrue: [ 
              | block |
              opts
                at: \'depth\'
                ifPresent: [ :notUsed | 
                  block := [ :each | 
                  each.value.value.quantity < 25 & (startDate <= each.value.value.orderDate)
                    & (each.value.value.orderDate < endDate)
                    & (1 <= each.value.value.discount)
                    & (each.value.value.discount <= 3) ].
                  block := [ :each | startDate <= each.value.value.orderDate & (each.value.value.orderDate < endDate) ] ]
                ifAbsent: [ 
                  block := [ :each | 
                  each.quantity < 25 & (startDate <= each.orderDate) & (each.orderDate < endDate)
                    & (1 <= each.discount) & (each.discount <= 3) ].
                  block := [ :each | startDate <= each.orderDate & (each.orderDate < endDate) ] ].
              selectTime := Time
                millisecondsToRun: [ 
                  selectCpuTime := System
                    millisecondsToRun: [ selectResult := theColl select: block ] ] ].
          (run == #\'all\' or: [ run == #\'queryBlock\' ])
            ifTrue: [ 
              | block |
              opts
                at: \'depth\'
                ifPresent: [ :notUsed | 
                  block := { :each | 
                  (each.value.value.quantity < 25) & (startDate <= each.value.value.orderDate)
                    & (each.value.value.orderDate < endDate)
                    & (1 <= each.value.value.discount)
                    & (each.value.value.discount <= 3) }.
                  block := { :each | 
                  (startDate <= each.value.value.orderDate)
                    & (each.value.value.orderDate < endDate) } ]
                ifAbsent: [ 
                  block := { :each | 
                  (each.quantity < 25) & (startDate <= each.orderDate)
                    & (each.orderDate < endDate) & (1 <= each.discount)
                    & (each.discount <= 3) }.
                  block := { :each | (startDate <= each.orderDate) & (each.orderDate < endDate) } ].
              selectBlockTime := Time
                millisecondsToRun: [ 
                  selectBlockCpuTime := System
                    millisecondsToRun: [ selectBlockResult := theColl select: block ] ] ].
          opts at: \'profile\' ifPresent: [ :ignored | profileTool pfview ] ].
      sortedColl := opts
        at: \'depth\'
        ifPresent: [ :notUsed | theColl asArray sorted: [ :a :b | a value value index <= b value value index ] ]
        ifAbsent: [ theColl asArray sorted: [ :a :b | a index <= b index ] ].
      analysis
        at: \'nsc\' put: theColl;
        at: \'nsc size\' put: theColl size;
        at: \'sorted\' put: sortedColl;
        at: \'query\' put: query;
        at: \'query result\' put: queryResult;
        at: \'query result size\' put: queryResult size;
        at: \'select result\' put: selectResult;
        at: \'select block result\' put: selectBlockResult;
        at: \'CORRECT\' put: queryResult = selectResult;
        at: \'time\'
          put:
            {queryTime.
              queryCpuTime.
              selectTime.
              selectCpuTime.
              selectBlockTime.
              selectBlockCpuTime};
        yourself.
      analysis ]
    ifPresent: [ :ignored | 
      TDManPage
        viewManPage:
          \'NAME
  bug - bug sript utility template
SYNOPSIS
  bug [-h|--help]
  bug [--clean] [--create[=<num_samples>]] [--index] [--query[=<window>]] [--profile[=all|formula|selectBlock|queryBlock]]
      [--depth] [--run=formula|selectBlock|queryBlock]
DESCRIPTION
  Attempt to characterize the performance issues seen in 3.1.0.2 MagLev runs involving these indexes:
          nsc
            createEqualityIndexOn: \'\'orderDate\'\' withLastElementClass: Date;
            createEqualityIndexOn: \'\'discount\'\'
              withLastElementClass: SmallInteger;
            createEqualityIndexOn: \'\'quantity\'\'
              withLastElementClass: SmallInteger;
            yourself 

  and this queries:

                (lines select: {:each |
                        (each.quantity < 25)
                        & (each.orderDate >= startDate) & (each.orderDate < endDate)
                        & (each.discount >= 1) & (each.discount <= 3)
                })

  giving these profile results:

================
STATISTICAL SAMPLING RESULTS
elapsed CPU time:    89413 ms
monitoring interval: 1.0 ms

 tally       %   class and method name
------   -----   --------------------------------------
 15091   17.08   BtreeBasicLeafNode        >> _addValues:start:end:into:
 14229   16.10   Array                     >> at:
  6952    7.87   Number                    >> _classSortOrdinal
  5235    5.92   PathEvaluator             >> _traverse:cachedOffsets:cachedClasses:incomplete:
  3683    4.17   Object                    >> size
  3541    4.01   QueryExecuter             >> evaluatePathConstantPredicates:for:
  3394    3.84   SmallInteger              >> =
  2497    2.83   IdentityBag               >> _at:
  2262    2.56   Object                    >> _idxGreaterThanAndLessThanValues:

  The theory at the time was that we were seeing at: and PathEvaluator calls on the stack because 
  the result set size was such that we were doing brute force queries on a large result set ... 
  But ... later runs and rebuilt indexes resulted in better performance profiles ... 

OPTIONS
  clean
    remove all indexes in system

  depth
    use a multi-level path to invoke the traversal algorithm

  create[=<num_samples>]
    create a collection with <num_samples>. Default (and minimum samples) is 15.
    
  index
    create indexes on the collection

  profile[=all|formula|selectBlock|queryBlock]
    run profile during query and bring up the `pf view`. 
      all
        profile combined, query, select, and selectBlock queries
      formula
        profile the formula query
      selectBlock
        profile the selectBlock query 
      queryBlock
        profile the queryBlock query 

  run=formula|selectBlock|queryBlock
    run 
      profile during query and bring up the `pf view`. 
    formula
      profile the formula query
    selectBlock
      profile the selectBlock query 
    queryBlock
      profile the queryBlock query 

  query[=<window>
    default <window> is 5 ... a window of 5 results in 10 samples

EXAMPLES
  ./bug --help
  ./bug --clean --create 
  ./bug --clean --create --index
  ./bug --clean --create --index --query=30; edit
  ./bug --clean --create=300 --index --query=600; edit
  ./bug --query=100000; edit
  ./bug --query=100000 profile; edit
  ./bug --query=100000 profile=query; edit
  ./bug --query=100000 profile=selectBlock; edit
  ./bug --query=100000 profile=queryBlock; edit

  ./bug --clean --depth --create --index --query=30; edit
  ./bug --clean --depth --create=300 --index --query=600; edit
  ./bug --depth --query=100000; edit
  ./bug --depth --query=100000 --run=query; edit
\'
        topez: topez ] ]',#creationTime:DateAndTime['2014-10-30T15:02:40.0424211025238-07:00'],#modificationTime:DateAndTime['2014-11-03T16:32:53.3784089088439-08:00']}