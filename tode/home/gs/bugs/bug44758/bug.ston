TDScriptLeafNode{#name:'bug',#contents:'[ :topez :objIn :tokens :command | 
  | opts args |
  \"for help: ./bug -h\"
  command
    getOptsMixedLongShort:
      {#(\'help\' $h #\'none\').
      #(\'clean\' nil #\'none\').
      #(\'create\' nil #\'optional\').
      #(\'formula\' nil #\'none\').
      #(\'index\' nil #\'optional\').
      #(\'profile\' nil #\'none\').
      #(\'query\' nil #\'optional\')}
    optionsAndArguments: [ :options :operands | 
      opts := options.
      args := operands ].
  opts
    at: \'help\'
    ifAbsent: [ 
      | analysis theColl query selectResult queryResult queryTime selectTime queryCpuTime selectCpuTime selectBlockResult selectBlockTime selectBlockCpuTime |
      analysis := Dictionary new.
      opts
        at: \'clean\'
        ifPresent: [ :ignored | 
          \"clean up indexes here\"
          UserGlobals removeKey: #\'coll\' ifAbsent: [  ].
          IndexManager removeAllIndexes.
          Smalltalk at: #\'StarSchema\' ifPresent: [ :cl | cl removeFromSystem ] ].
      opts
        at: \'create\'
        ifPresent: [ :sampleCount | 
          | cls nsc samples startDate minCount count |
          cls := Smalltalk
            at: #\'StarSchema\'
            ifAbsent: [ 
              cls := Object
                subclass: \'StarSchema\'
                instVarNames: #(\'index\' \'orderDate\' \'discount\' \'quantity\')
                inDictionary: UserGlobals.
              cls
                compile: \'index: anObject index := anObject\';
                compile: \'index ^index\';
                compile: \'orderDate: anObject orderDate := anObject\';
                compile: \'orderDate ^orderDate\';
                compile: \'discount: anObject discount := anObject\';
                compile: \'discount ^discount\';
                compile: \'quantity: anObject quantity := anObject\';
                compile: \'quantity ^quantity\';
                compile:
                    \'printOn: aStream aStream nextPutAll: \'\'index = \'\', index printString, \'\' orderDate = \'\', orderDate printString, \'\' discount = \'\', discount printString, \'\' quantity = \'\', quantity printString\';
                yourself ].
          minCount := 15.
          samples := sampleCount
            ifNil: [ minCount ]
            ifNotNil: [ sampleCount asNumber max: minCount ].
          nsc := RcIdentityBag new: 100.
          startDate := Date newDay: 1 year: 1993.
          UserGlobals
            at: #\'coll\' put: nsc;
            at: #\'baseStartDate\' put: startDate;
            at: #\'samples\' put: samples;
            yourself.
          count := 1.
          1 to: 365 do: [ :index | 
            | sample date |
            date := startDate + (index - 1) days.
            samples
              timesRepeat: [ 
                sample := cls new
                  index: count;
                  orderDate: date;
                  quantity: index;
                  discount: #(0 1 2 3 4 5) atRandom;
                  yourself.
                count := count + 1.
                nsc add: sample.
                index \\\\ 1000 = 0
                  ifTrue: [ System commitTransaction ] ].
            UserGlobals at: #\'lastStartDate\' put: date ] ].
      theColl := UserGlobals at: #\'coll\' ifAbsent: [ Set new ].
      opts
        at: \'index\'
        ifPresent: [ :ignored | 
          IndexManager autoCommit: true.
          GsIndexSpec new
            equalityIndex: \'each.orderDate\' lastElementClass: Date;
            equalityIndex: \'each.discount\' lastElementClass: SmallInteger;
            equalityIndex: \'each.quantity\' lastElementClass: SmallInteger;
            createIndexesOn: theColl;
            yourself ].
      opts
        at: \'query\'
        ifPresent: [ :window | 
          | startDate endDate baseStartDate baseEndDate mid d1 d2 windowSize profileTool queryString samplesPerDay |
          profileTool := topez toolInstanceFor: \'pf\'.
          opts at: \'profile\' ifPresent: [ :ignored | profileTool pfstart ].
          samplesPerDay := UserGlobals at: #\'samples\' ifAbsent: [ 15 ].
          windowSize := (window ifNil: [ 5 ] ifNotNil: [ window asNumber ])
            // samplesPerDay.
          baseStartDate := UserGlobals
            at: #\'baseStartDate\'
            ifAbsent: [ Date now ].
          baseEndDate := UserGlobals at: #\'lastStartDate\' ifAbsent: [ Date now ].
          mid := (baseEndDate - baseStartDate) / 2.
          startDate := baseStartDate + mid - windowSize days.
          endDate := baseStartDate + mid + windowSize days.
          analysis
            at: \'window size\' put: windowSize;
            at: \'samples per day\' put: samplesPerDay;
            at: \'startDate\' put: startDate;
            at: \'endDate\' put: endDate;
            at: \'mid\' put: mid;
            at: \'base startDate\' put: baseStartDate;
            at: \'base endDate\' put: baseEndDate;
            yourself.
          queryString := \'(each.quantity < 25)\'.
          queryString := \'(1 <= each.discount <= 3)\'.
          queryString := \'(each.quantity < 25) & (startDate <= each.orderDate < endDate) & (1 <= each.discount <= 3)\'.
          queryString := \'(startDate <= each.orderDate < endDate)\'.
          query := (queryString asQueryOn: theColl)
            bind: \'startDate\' to: startDate;
            bind: \'endDate\' to: endDate;
            queryOptions: GsQueryOptions default - GsQueryOptions autoOptimize;
            optimize;
            yourself.
          queryTime := Time
            millisecondsToRun: [ queryCpuTime := System millisecondsToRun: [ queryResult := query queryResult ] ].
          opts
            at: \'formula\'
            ifAbsent: [ 
              false
                ifTrue: [ 
                  selectResult := theColl
                    select: [ :each | 
                      each.quantity < 25 & (startDate <= each.orderDate) & (each.orderDate < endDate)
                        & (1 <= each.discount) & (each.discount <= 3) ] ].
              selectTime := Time
                millisecondsToRun: [ 
                  selectCpuTime := System
                    millisecondsToRun: [ 
                      selectResult := theColl
                        select: [ :each | startDate <= each.orderDate & (each.orderDate < endDate) ] ] ].
              false
                ifTrue: [ 
                  selectBlockResult := theColl
                    select: { :each | 
                      (each.quantity < 25) & (startDate <= each.orderDate)
                        & (each.orderDate < endDate) & (1 <= each.discount)
                        & (each.discount <= 3) } ].
              selectBlockTime := Time
                millisecondsToRun: [ 
                  selectBlockCpuTime := System
                    millisecondsToRun: [ 
                      selectBlockResult := theColl
                        select: { :each | (startDate <= each.orderDate) & (each.orderDate < endDate) } ] ] ].
          opts at: \'profile\' ifPresent: [ :ignored | profileTool pfview ] ].
      analysis
        at: \'nsc\' put: theColl;
        at: \'sorted\'
          put: (theColl asArray sorted: [ :a :b | a index <= b index ]);
        at: \'query\' put: query;
        at: \'query result\' put: queryResult;
        at: \'select result\' put: selectResult;
        at: \'select block result\' put: selectBlockResult;
        at: \'CORRECT\' put: queryResult = selectResult;
        at: \'time\'
          put:
            {queryTime.
              queryCpuTime.
              selectTime.
              selectCpuTime.
              selectBlockTime.
              selectBlockCpuTime};
        yourself.
      analysis ]
    ifPresent: [ :ignored | 
      TDManPage
        viewManPage:
          \'NAME
  bug - bug sript utility template
SYNOPSIS
  bug [-h|--help]
  bug [--clean] [--create[=<num_samples>]] [--index] [--query[=<window>]] [--formula] [--profile]
DESCRIPTION
  Attempt to characterize the performance issues seen in 3.1.0.2 MagLev runs involving these indexes:
          nsc
            createEqualityIndexOn: \'\'orderDate\'\' withLastElementClass: Date;
            createEqualityIndexOn: \'\'discount\'\'
              withLastElementClass: SmallInteger;
            createEqualityIndexOn: \'\'quantity\'\'
              withLastElementClass: SmallInteger;
            yourself 

  and this queries:

                (lines select: {:each |
                        (each.quantity < 25)
                        & (each.orderDate >= startDate) & (each.orderDate < endDate)
                        & (each.discount >= 1) & (each.discount <= 3)
                })

  giving these profile results:

================
STATISTICAL SAMPLING RESULTS
elapsed CPU time:    89413 ms
monitoring interval: 1.0 ms

 tally       %   class and method name
------   -----   --------------------------------------
 15091   17.08   BtreeBasicLeafNode        >> _addValues:start:end:into:
 14229   16.10   Array                     >> at:
  6952    7.87   Number                    >> _classSortOrdinal
  5235    5.92   PathEvaluator             >> _traverse:cachedOffsets:cachedClasses:incomplete:
  3683    4.17   Object                    >> size
  3541    4.01   QueryExecuter             >> evaluatePathConstantPredicates:for:
  3394    3.84   SmallInteger              >> =
  2497    2.83   IdentityBag               >> _at:
  2262    2.56   Object                    >> _idxGreaterThanAndLessThanValues:

  The theory at the time was that we were seeing at: and PathEvaluator calls on the stack because 
  the result set size was such that we were doing brute force queries on a large result set ... 
  But ... later runs and rebuilt indexes resulted in better performance profiles ... 

OPTIONS
  clean
    remove all indexes in system

  create[=<num_samples>]
    create a collection with <num_samples>. Default (and minimum samples) is 15.
    
  formula
    only run the formula query ... skip the select block query.

  index
    create indexes on the collection

  profile
    run profile during query and bring up the `pf view`

  query[=<window>
    default <window> is 5 ... a window of 5 results in 10 samples

EXAMPLES
  ./bug --help
  ./bug --clean --create 
  ./bug --clean --create --index
  ./bug --clean --create --index --query=30; edit
  ./bug --clean --create=300 --index --query=600; edit
  ./bug --query=100000; edit
\'
        topez: topez ] ]',#creationTime:DateAndTime['2014-10-30T15:02:40.0424211025238-07:00'],#modificationTime:DateAndTime['2014-11-03T12:47:39.8382949829101-08:00']}