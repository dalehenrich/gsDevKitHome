TDScriptLeafNode{#name:'lesson_02',#contents:'[ :topez :objIn :tokens :command :commandNode | 
  | opts args |
  \"for help: ./lesson_02 -h\"
  command
    getOptsMixedLongShort:
      {#(\'help\' $h #\'none\').
      #(\'create\' nil #\'optional\').
      #(\'edit\' $e #\'none\').
      #(\'inspect\' $i #\'none\')}
    optionsAndArguments: [ :options :operands | 
      opts := options.
      args := operands ].
  opts
    at: \'help\'
    ifAbsent: [ 
      opts
        at: \'create\'
        ifPresent: [ :arg | 
          | generations |
          arg
            ifNil: [ generations := 2 ]
            ifNotNil: [ generations := arg asNumber ].
          Smalltalk
            at: #\'INDEXING_TUTORIAL\'
            put: (IXFamilyTree createFamily: generations) ].
      opts
        at: \'inspect\'
        ifPresent: [ :ignored | (Smalltalk at: #\'INDEXING_TUTORIAL\') inspect ].
      opts at: \'edit\' ifPresent: [ :ignored | commandNode edit: topez ] ]
    ifPresent: [ :ignored | 
      TDManPage
        viewManPage:
          \'NAME
  lesson_02 - Introducing the Family Tree (IXFamilyTree)
SYNOPSIS
  lesson_02 [-h|--help] [--create[=<generations>]] [-i|--inspect] [-e|--edit]
DESCRIPTION
  LESSON 2
  --------
  The IXFamilyTree class is designed to generate a population of IXPerson instances with a 
  rich variety of fields that can be used to illustrate a number of the GemStone indexing 
  features.

  Here is an example of the fields in an instance of IXPerson:

    (class)@           -> IXPerson
    (oop)@             -> 182938113
    antiqueCollection@ -> anIXAntiqueCollection[$148]
    birthday@          -> 09/28/1982
    birthTime@         -> 16:55:16
    daughters@         -> aSet( Jessie Elizabeth Partridge, Evelyn Marion Partridge)
    father@            -> Martin Francis Partridge
    firstName@         -> \'\'Brian\'\'
    gender@            -> #male
    isFemale@          -> false
    isMale@            -> true
    isMarried@         -> true
    lastName@          -> \'\'Partridge\'\'
    middleName@        -> \'\'Kentland\'\'
    mother@            -> Eve Mary Addams
    nilField@          -> nil
    numberOfChildren@  -> 6
    sons@              -> aSet( James Marion Partridge, James Charles Partridge, 
                                Martin Marion Partridge, Charlie Kentland Partridge)
    spouses@           -> nil
    stringField@       -> \'\'Fl\u00C3\u00BC\u00C3\u009Fe\'\'
    tags@              -> aSet( \'\'bowling\'\', \'\'reading\'\', \'\'cooking\'\', \'\'chess\'\', \'\'knitting\'\')
    unicodeField@      -> \'\'Fl\u00C3\u00BC\u00C3\u009Fe\'\'

  Use the following to create and inspect a small population of IXPersons:

    `./lesson_02 --create=1 --inspect`

  For the remaining lessons, we want to have just a few more IXPerson instances, so use the 
  following to generate a family tree:

    `./lesson_02 --create=4`

  LESSON 3
  --------
  `./lesson_03 -h`

  Table of Contents
  -----------------
  Using the Indexing Tutorial         - `./lesson_01 -h`
  Introducing the Family Tree         - `./lesson_02 -h`
  Family Tree Queries                 - `./lesson_03 -h`
  Query timing and profiling          - `./lesson_04 -h`
  Family Tree Indexes                 - `./lesson_05 -h`
  Indexed Query timing and profiling  - `./lesson_06 -h`

OPTIONS
  create[=<generations>]
    Create a family tree with <generations> generations of IXPersons. The default is 3 generations.
    The instance is stored as a global named INDEXING_TUTORIAL.

  edit
    Bring up an editor on the source for this lesson.

  help
    Produce this man page.

  inspect
    The inspect option allows you to view the IXFamily tree instance that is stored as the 
    INDEXING_TUTORIAL global.

EXAMPLES
  ./lesson_02 --help
  ./lesson_02 -h
  ./lesson_02 --create=3 -i
\'
        topez: topez ] ]',#creationTime:DateAndTime['2014-08-07T16:14:15.9402339458465-07:00'],#modificationTime:DateAndTime['2014-08-09T07:06:08.2884459495544-07:00']}