TDScriptLeafNode{#name:'bug',#contents:'[ :topez :objIn :tokens :command | 
  | opts args |
  \"for help: ./bug -h\"
  command
    getOptsMixedLongShort:
      {#(\'help\' $h #\'none\').
      #(\'boom\' nil #\'none\').
      #(\'clean\' nil #\'none\').
      #(\'create\' nil #\'none\')}
    optionsAndArguments: [ :options :operands | 
      opts := options.
      args := operands ].
  opts
    at: \'help\'
    ifAbsent: [ 
      | analysis theColl query |
      analysis := Dictionary new.
      opts
        at: \'clean\'
        ifPresent: [ :ignored | 
          \"clean up indexes here\"
          UserGlobals removeKey: #\'coll\' ifAbsent: [  ].
          IndexManager removeAllIndexes ].
      opts
        at: \'create\'
        ifPresent: [ :ignored | 
          | nsc |
          nsc := IdentityBag
            with: QuadByteString new
            with: DoubleByteString new
            with: (QuadByteSymbol withAll: String new).
          UserGlobals at: #\'coll\' put: nsc.
          true
            ifTrue: [ nsc createEqualityIndexOn: \'\' withLastElementClass: QuadByteString ] ].
      opts
        at: \'boom\'
        ifPresent: [ :ignored | 
          | nsc stream readStreamResult selectResult aKP doResult selectBlockResult selectBlockAsStreamResult detectResult detectBlockResult |
          nsc := UserGlobals at: #\'coll\' ifAbsent: [ Set new ].
          aKP := QuadByteString new.
          query := (GsQuery fromString: \'each ~= aKP\' on: nsc)
            bind: \'aKP\'
            to: aKP.
          false
            ifTrue: [ 
              \"`= is not a streamable query\"
              readStreamResult := IdentityBag new.
              stream := query readStream.
              [ stream atEnd ] whileFalse: [ readStreamResult add: stream next ] ].
          doResult := IdentityBag new.
          query do: [ :each | doResult add: each ].
          selectResult := nsc select: [ :each | each ~= aKP ].
          detectResult := nsc detect: [ :each | each ~= aKP ] ifNone: [ #() ].
          selectBlockResult := nsc select: { :each | each ~= aKP }.
          detectBlockResult := nsc
            detect: { :each | each ~= aKP }
            ifNone: [ #() ].
          selectBlockAsStreamResult := IdentityBag new.
          true
            ifTrue: [ 
              stream := nsc selectAsStream: { :each | each ~= aKP }.
              [ stream atEnd ]
                whileFalse: [ selectBlockAsStreamResult add: stream next ] ].
          analysis
            at: \'query\' put: query;
            at: \'query result\' put: query queryResult;
            at: \'query readStream\' put: readStreamResult;
            at: \'query do\' put: doResult;
            at: \'select\' put: selectResult;
            at: \'detect\' put: detectResult;
            at: \'selectAsStream: {}\' put: selectBlockAsStreamResult;
            at: \'select: {}\' put: selectBlockResult;
            at: \'detect: {}\' put: detectBlockResult;
            yourself ].
      theColl := UserGlobals at: #\'coll\' ifAbsent: [ Set new ].
      analysis
        at: \'audit\' put: theColl auditIndexes;
        at: \'nsc\' put: theColl;
        yourself.
      analysis ]
    ifPresent: [ :ignored | 
      TDManPage
        viewManPage:
          \'NAME
  bug - bug sript utility template
SYNOPSIS
  bug [-h|--help]
  bug [--install][--clean][--create][--boom]
DESCRIPTION
  Reproduce bug.
EXAMPLES
  ./bug --help
  ./bug --clean --create --boom; edit
\'
        topez: topez ] ]',#creationTime:DateAndTime['2015-05-20T16:47:34.3946878910064-07:00'],#modificationTime:DateAndTime['2015-05-20T17:26:04.612242937088-07:00']}