# must login first ....

level 1

# Install support methods
input transientSessionMethods.gs
commit

# Create example class
run
Object subclass: 'Bug44814' instVarNames: #() inDictionary: UserGlobals.
%

# Create persistent methods that will be overridden by transient methods
run
Bug44814 
  compileMethod: 'transientMethod ^nil'
  dictionaries: System myUserProfile symbolList
  category: 'persistent'.
Bug44814 class 
  compileMethod: 'transientMethod ^nil' 
  dictionaries: System myUserProfile symbolList
  category: 'persistent'.
%

set class Bug44814
list selectors
list cselectors

# Should return { nil. nil }

run
{
  Bug44814 new transientMethod.
  Bug44814 transientMethod.
}
%

# Create instance and class side transient methods

run
  | spec |
  spec := {'transientMethod ^#tm'.
  'transientMethod1 ^#tm1'}.
  GsPackagePolicy
    _createTransientMethodsFor: Bug44814
    dictionaries: System myUserProfile symbolList
    defaultCategory: #'transient'
    transientMethodsSpec: spec.	"create instance-side transient methods"
  spec := {'transientMethod ^#tm'.
  'transientMethod1 ^#tm1'}.
  GsPackagePolicy
    _createTransientMethodsFor: Bug44814 class
    dictionaries: System myUserProfile symbolList
    defaultCategory: #'transient'
    transientMethodsSpec: spec	"create class-side transient methods"
%

set class Bug44814
list selectors
list cselectors

# Should return { #tm. #tm. #tm1. #tm1 }

run
{
  Bug44814 new transientMethod.
  Bug44814 transientMethod.
  Bug44814 new transientMethod1.
  Bug44814 transientMethod1.
}
%

# Remove the transient methods

run
GsPackagePolicy
    _removeTransientMethodsFor: Bug44814;
    _removeTransientMethodsFor: Bug44814 class
%

set class Bug44814
list selectors
list cselectors

# Should return { nil. nil }

run
{
  Bug44814 new transientMethod.
  Bug44814 transientMethod.
}
%

